---
// Skills section with animated proficiency indicators
const technicalSkills = [
	{ name: "JavaScript", proficiency: 90, icon: "‚ö°" },
	{ name: "React", proficiency: 85, icon: "‚öõÔ∏è" },
	{ name: "Node.js", proficiency: 80, icon: "üü¢" },
	{ name: "TypeScript", proficiency: 75, icon: "üìò" },
	{ name: "Python", proficiency: 70, icon: "üêç" },
	{ name: "SQL", proficiency: 85, icon: "üóÑÔ∏è" },
	{ name: "Git", proficiency: 90, icon: "üìù" },
	{ name: "Docker", proficiency: 65, icon: "üê≥" }
];

const softSkills = [
	{ name: "Problem Solving", proficiency: 95, icon: "üß©" },
	{ name: "Communication", proficiency: 90, icon: "üí¨" },
	{ name: "Team Leadership", proficiency: 85, icon: "üë•" },
	{ name: "Time Management", proficiency: 88, icon: "‚è∞" },
	{ name: "Adaptability", proficiency: 92, icon: "üîÑ" },
	{ name: "Creativity", proficiency: 87, icon: "üé®" }
];

const categories = [
	{ name: "Frontend", skills: ["HTML", "CSS", "JavaScript", "React", "Vue.js", "Tailwind CSS"] },
	{ name: "Backend", skills: ["Node.js", "Python", "Express", "Django", "PostgreSQL", "MongoDB"] },
	{ name: "Tools", skills: ["Git", "Docker", "AWS", "Figma", "Postman", "VS Code"] }
];
---

<section class="min-h-screen bg-white dark:bg-slate-900 pt-24 pb-16">
	<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
		<!-- Section Header -->
		<div class="text-center mb-16 animate-fade-in-up">
			<h1 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-4">Skills & Expertise</h1>
			<div class="w-24 h-1 bg-blue-600 mx-auto rounded-full mb-8"></div>
			<p class="text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">
				Here's a comprehensive overview of my technical and soft skills, 
				showing my proficiency levels and areas of expertise.
			</p>
		</div>

		<!-- Technical Skills -->
		<div class="mb-16 animate-fade-in-up animation-delay-200">
			<h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-8 text-center">Technical Skills</h2>
			<div class="grid md:grid-cols-2 gap-8">
				{technicalSkills.map((skill, index) => (
					<div class="bg-gray-50 dark:bg-slate-800 p-6 rounded-2xl hover:shadow-lg transition-shadow duration-300">
						<div class="flex items-center justify-between mb-4">
							<div class="flex items-center space-x-3">
								<span class="text-2xl">{skill.icon}</span>
								<h3 class="text-lg font-semibold text-gray-900 dark:text-white">{skill.name}</h3>
							</div>
							<span class="text-sm font-medium text-blue-600 dark:text-blue-400">{skill.proficiency}%</span>
						</div>
						<div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3">
							<div 
								class="bg-gradient-to-r from-blue-500 to-purple-600 h-3 rounded-full transition-all duration-1000 ease-out"
								style={`width: 0%; animation: fillBar 1.5s ease-out ${index * 0.1}s forwards`}
							></div>
						</div>
					</div>
				))}
			</div>
		</div>

		<!-- Soft Skills -->
		<div class="mb-16 animate-fade-in-up animation-delay-400">
			<h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-8 text-center">Soft Skills</h2>
			<div class="grid md:grid-cols-2 gap-8">
				{softSkills.map((skill, index) => (
					<div class="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 p-6 rounded-2xl hover:shadow-lg transition-shadow duration-300">
						<div class="flex items-center justify-between mb-4">
							<div class="flex items-center space-x-3">
								<span class="text-2xl">{skill.icon}</span>
								<h3 class="text-lg font-semibold text-gray-900 dark:text-white">{skill.name}</h3>
							</div>
							<span class="text-sm font-medium text-purple-600 dark:text-purple-400">{skill.proficiency}%</span>
						</div>
						<div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3">
							<div 
								class="bg-gradient-to-r from-purple-500 to-pink-600 h-3 rounded-full transition-all duration-1000 ease-out"
								style={`width: 0%; animation: fillBar 1.5s ease-out ${(index + 8) * 0.1}s forwards`}
							></div>
						</div>
					</div>
				))}
			</div>
		</div>

		<!-- Skill Categories -->
		<div class="animate-fade-in-up animation-delay-600">
			<h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-8 text-center">Skill Categories</h2>
			<div class="grid md:grid-cols-3 gap-8">
				{categories.map((category, index) => (
					<div class="bg-white dark:bg-slate-800 border border-gray-200 dark:border-gray-700 p-8 rounded-2xl shadow-sm hover:shadow-lg transition-all duration-300 hover:scale-105">
						<h3 class="text-xl font-bold text-gray-900 dark:text-white mb-6 text-center">{category.name}</h3>
						<div class="flex flex-wrap gap-2 justify-center">
							{category.skills.map((skill) => (
								<span class="bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 px-3 py-1 rounded-full text-sm font-medium hover:bg-blue-200 dark:hover:bg-blue-900/50 transition-colors duration-300">
									{skill}
								</span>
							))}
						</div>
					</div>
				))}
			</div>
		</div>

		<!-- Call to Action -->
		<div class="text-center mt-16 animate-fade-in-up animation-delay-800">
			<p class="text-gray-600 dark:text-gray-400 mb-6">Want to see these skills in action?</p>
			<a 
				href="/projects" 
				class="bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 text-white px-8 py-3 rounded-lg font-medium transition-all duration-300 hover:scale-105 hover:shadow-lg"
			>
				View My Projects
			</a>
		</div>
	</div>
</section>

<style>
	.animate-fade-in-up {
		animation: fadeInUp 0.8s ease-out forwards;
		opacity: 0;
		transform: translateY(30px);
	}

	.animation-delay-200 {
		animation-delay: 0.2s;
	}

	.animation-delay-400 {
		animation-delay: 0.4s;
	}

	.animation-delay-600 {
		animation-delay: 0.6s;
	}

	.animation-delay-800 {
		animation-delay: 0.8s;
	}

	@keyframes fadeInUp {
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	@keyframes fillBar {
		to {
			width: var(--proficiency);
		}
	}
</style>

<script>
	// Animate skill bars on scroll
	document.addEventListener('DOMContentLoaded', function() {
		const skillBars = document.querySelectorAll('[style*="animation: fillBar"]');
		
		const observer = new IntersectionObserver((entries) => {
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					const bar = entry.target as HTMLElement;
					const parentElement = bar.parentElement;
					const previousElement = parentElement?.previousElementSibling;
					const percentageSpan = previousElement?.querySelector('span');
					const percentage = percentageSpan?.textContent;
					
					if (percentage) {
						bar.style.setProperty('--proficiency', percentage);
					}
				}
			});
		}, { threshold: 0.5 });

		skillBars.forEach(bar => observer.observe(bar));
	});
</script> 